-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [30] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited
by the assignment description of course).  Let us know what third-party
source code or resources you used (if any) so it's clear what's your work
and what isn't:

[...]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as the efficiency, robustness,
generality, realism, or style of a solution.

[X] Stage 1 : pre-emptive operating system kernel                    ( 30%)

    Stage 2 : close generalisations and enhancements
[*]           - fork, exec and exit system calls                     ( 15%)
[?]           - priority based scheduler                             ( 10%)
[?]           - Inter-Process Communication (IPC)                    ( 15%)

    Stage 3 : open  generalisations and enhancements                 ( 30%)
[?]           - MMU-based protection and virtualisation
                *OR*
[?]           - LCD screen and PS/2 device drivers and GUI
                *OR*
[?]           - file system based on simplified, emulated disk
                *OR*
[?]           - kernel port to real, physical hardware

                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[For the first section of Stage 2, I have gained a solid understanding of how fork, exec and exit system calls work but have not been able to implement them properly due to poor understanding of where and how to do so. I spent a lot of time simply trying to understand the coursework, so made little progress even though put a lot of time in.]

-------------------------------------------------------------------------------
